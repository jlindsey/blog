<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joshua Lindsey</title>
  <link href="http://blog.joshualindsey.net/atom.xml" rel="self" />
  <link href="http://blog.joshualindsey.net/" />
  <updated>2011-09-04T16:41:29-04:00</updated>
  <id>http://blog.joshualindsey.net/</id>
  <author>
    <name>Josh Lindsey</name>
    <email>joshua.s.lindsey@gmail.com</email>
  </author>

  
  <entry>
   <title>Unix Epochs in JavaScript</title>
   <link href="http://blog.joshualindsey.net/2011/08/28/unix-epochs-in-javascript"/>
   <updated>2011-08-28T00:00:00-04:00</updated>
   <id>http://blog.joshualindsey.net/2011/08/28/unix-epochs-in-javascript</id>
   <content type="html">&lt;p&gt;JavaScript – unlike many of the languages you might use to interact with it – deals with Unix Epoch timestamps in
milliseconds instead of seconds. For instance, PHP's &lt;code&gt;time()&lt;/code&gt;, Ruby's &lt;code&gt;Time.now&lt;/code&gt;, and Python's &lt;code&gt;time.time()&lt;/code&gt; all return the
Epoch in seconds. This can lead to some strange behaviors if you aren't expecting it. It's also fairly annoying when passing
timestamps back and forth between your server-side language and JavaScript.&lt;/p&gt;

&lt;p&gt;Here are a few functions you can add to JavaScript's &lt;code&gt;Date&lt;/code&gt; builtin to make your life easier.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1176230.js&quot;&gt; &lt;/script&gt;



</content>
  </entry>
  
  <entry>
   <title>PC Gaming isn't dead! Death to PC Gaming!</title>
   <link href="http://blog.joshualindsey.net/2011/08/26/pc-gaming-isnt-dead-death-to-pc-gaming"/>
   <updated>2011-08-26T00:00:00-04:00</updated>
   <id>http://blog.joshualindsey.net/2011/08/26/pc-gaming-isnt-dead-death-to-pc-gaming</id>
   <content type="html">&lt;p&gt;I don't normally write blog posts about gaming stuff, but this was too good to pass up. Here's the &lt;a href=&quot;http://arstechnica.com/gaming/news/2011/08/razer-to-release-stylish-2800-gaming-laptop-complete-with-dynamic-buttons.ars&quot;&gt;Ars Technica
article&lt;/a&gt;
I'm referencing.&lt;/p&gt;

&lt;p&gt;A large argument in favor of PC Gaming is that you don't have to buy a whole new system every few years, you can just
upgrade the parts that are out of date.&lt;/p&gt;

&lt;p&gt;An argument against PC Gaming is the cost of entry for a decent system is too high (compared to console gaming).&lt;/p&gt;

&lt;p&gt;Another argument against it is that the hardware is not standardized, so developers have to consider many possible
permutations of setup when they make games. And trying to manage driver versions to find one that works is hell.&lt;/p&gt;

&lt;p&gt;Razer has released a gaming laptop (so the parts are not easily user-replaceable) with a custom touchpad/screen (which
needs its own driver and which developers will have to write game code specifically to support) for $2,800 (so... not
cheap). And then their marketing campaign is &quot;&lt;a href=&quot;http://www.ubergizmo.com/2011/08/razer-pc-gaming-is-not-dead/&quot;&gt;PC GAMING ISN'T
DEAD!&lt;/a&gt;&quot;&lt;/p&gt;

&lt;p&gt;Bravo.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
   <title>Testing Log Output in RSpec</title>
   <link href="http://blog.joshualindsey.net/2011/06/30/testing-log-output-in-rspec"/>
   <updated>2011-06-30T00:00:00-04:00</updated>
   <id>http://blog.joshualindsey.net/2011/06/30/testing-log-output-in-rspec</id>
   <content type="html">&lt;p&gt;In Web Ops, I often find myself writing small daemons or background processors. It's good practice to maintain logs
for these sorts of processes for informational and debugging purposes. Since these logs can be invaluable in
tracking down production errors, it's a good idea to include them in your test suite.&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Testing log output can be clumsy and slow. I've seen some tests that attempt to do it by directing their logger to
some temporary file, then reading it back in during the spec. This is problematic for a number of reasons. You have
to write cleanup logic in your test harness to make sure you delete these temporary files. You probably have to
delete them periodically throughout the suite to make sure you don't have any false positives in your checks.&lt;/p&gt;

&lt;p&gt;It is, in general, a very clunky solution.&lt;/p&gt;

&lt;h2&gt;The Setup&lt;/h2&gt;

&lt;p&gt;Consider a gem that has a top-level namespace module like so:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1057540.js?file=example.rb&quot;&gt;&lt;/script&gt;


&lt;p&gt;It exposes and persists a &lt;code&gt;Logger&lt;/code&gt; object going to &lt;code&gt;$stdout&lt;/code&gt;. Fairly straightforward stuff. Let's further say you
have a worker class inside this namespace called &lt;code&gt;App&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1057540.js?file=app.rb&quot;&gt;&lt;/script&gt;


&lt;p&gt;Also pretty straightforward. Simply logs a lot as an example.&lt;/p&gt;

&lt;p&gt;So now how will we go about testing this log output? Especially the error line in &lt;code&gt;perform_action&lt;/code&gt;, which we will
need to spec out?&lt;/p&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;Ruby has got our backs here, with a handy little class called
&lt;a href=&quot;http://www.ruby-doc.org/stdlib/libdoc/stringio/rdoc/index.html&quot;&gt;StringIO&lt;/a&gt;. StringIO acts like a member of Ruby's
&lt;code&gt;IO&lt;/code&gt; family. It can &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt; and &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;puts&lt;/code&gt; and &lt;code&gt;flush&lt;/code&gt;. But it's only writing to an
internal String buffer, not a file or other IO sink. This makes it extremely easy to test our log output.&lt;/p&gt;

&lt;p&gt;Continuing in our exercise, let's setup our spec helper:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1057540.js?file=spec_helper.rb&quot;&gt;&lt;/script&gt;


&lt;p&gt;Here we're setting up a block to be run before each spec which creates a new StringIO buffer and a new Logger with
that buffer, then sets the internal &lt;code&gt;@@logger&lt;/code&gt; class variable to our Logger instance. We've also created a small
helper function that returns the internal String representation of our StringIO object.&lt;/p&gt;

&lt;p&gt;Now we can write the actual spec for our App class:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1057540.js?file=app_spec.rb&quot;&gt;&lt;/script&gt;


&lt;p&gt;Successfully testing the output of the Logger.&lt;/p&gt;

&lt;p&gt;You can view a project that brings all of this together at my GitHub here:
&lt;a href=&quot;https://github.com/jlindsey/log_test_example&quot;&gt;https://github.com/jlindsey/log_test_example&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
   <title>I am using Automator, and so should you.</title>
   <link href="http://blog.joshualindsey.net/2011/04/26/i-am-using-automator-and-so-should-you"/>
   <updated>2011-04-26T00:00:00-04:00</updated>
   <id>http://blog.joshualindsey.net/2011/04/26/i-am-using-automator-and-so-should-you</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/img/automator/automator-icon.png&quot; alt=&quot;Automator&quot; title=&quot;Automator&quot; class=&quot;left&quot; style=&quot;display: inline;&quot;&gt;
&lt;a href=&quot;http://www.macosxautomation.com/automator/&quot;&gt;Automator&lt;/a&gt; is an aptly-named app that has shipped as part of Mac OS X since Tiger way back in 2005.
It received a much-needed overhaul in Leopard, and had some new actions added in Snow Leopard. Snow Leopard also overhauled the way the often-overlooked
Services menu worked, which is a kind of tangential upgrade to Automator. Most people I know who use OS X as their primary work machine (mostly web developers)
don't think much of Automator, which is a shame because it can do some really useful stuff for you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/automator/services-menu-empty.png&quot; alt=&quot;Empty Services Menu&quot; class=&quot;right post-image&quot;&gt;
If you use OS X, you've probably noticed the Services menu. You may have even opened it once or twice and been greeted with the screenshot you can see here. That
&quot;No Services Apply&quot; message is a product of the Snow Leopard changes mentioned a second ago. In SL, Services were changed to only show up in the menu if they are
applicable to the current app and situation. This screenshot is from Chrome, with just a tab open and no text selected. If we select some text, however, you can
see that the menu populates with lots of useful things.&lt;/p&gt;

&lt;p&gt;We're getting a bit ahead of ourselves, though. I should start at the beginning.&lt;/p&gt;

&lt;h2&gt;What is a Service?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/automator/services-menu-populated.png&quot; alt=&quot;Populated Services Menu&quot; class=&quot;left post-image&quot;&gt;
A Service in OS X is a function or workflow you can access globally from any application and which interacts with that application in specific ways.&lt;/p&gt;

&lt;p&gt;Notice the screenshot here. These Services show up in Chrome on my laptop when I have some text selected. The text you have selected is passed along
to the Service which processes it, passes it along to some other application, or perhaps uses it in a web request. Really, a Service can be created
to do anything you want.&lt;/p&gt;

&lt;p&gt;Services are not all Automator can make, though. &lt;em&gt;Workflows&lt;/em&gt; are a series of actions that you run from within Automator itself. In fact, Services can be
thought of as app-sepecific workflows. &lt;em&gt;Applications&lt;/em&gt; are similar to Workflows, but are self-contained and can be run by opening them just like any other
application. &lt;em&gt;Folder Actions&lt;/em&gt; are Workflows that are attached to folders on the filesystem and triggered when the contents of the folder are changed. There
are other things to make as well: the full range of Automator products can be seen by simply starting Automator.app itself.&lt;/p&gt;

&lt;p&gt;I decided to delve into Automator and create a Service for myself after about the tenth time I was stymied in my attempt to paste a simple Skype chat transcript
into an email. I won't derail into Skype-bashing here; the &lt;a href=&quot;http://www.google.com/search?sourceid=chrome&amp;amp;ie=UTF-8&amp;amp;q=new+skype+sucks&quot;&gt;lamentations&lt;/a&gt; of Mac Skype
users are well documented elsewhere. In short, simply selecting the portion of the log you want to share and copying it gives you this jumbled mess:&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/img/automator/skype-log-awful.png&quot; alt=&quot;Awful Skype Log&quot;&gt;&lt;/center&gt;


&lt;p&gt;Which is fairly incomprehensible. It gets much worse when trying to make sense of a long converstation between multiple parties.&lt;/p&gt;

&lt;h2&gt;Creating a Service&lt;/h2&gt;

&lt;p&gt;The first thing to do is start up Automator, of course. It will immediately assume you are trying to make something new (which you are, so that's nice)
and will ask you which new thing you are trying to make. Select Service (the gear icon) and hit the Choose button. You will be presented with a blank Automator
workflow window. To the left is the action library. You can drag actions from here to the right, into the main workspace editor area. The bottom of this area
is your debug log, and the top is a bar that selects your inputs and sources.&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/img/automator/automator-service-selects.png&quot; style=&quot;border: 1px solid black&quot;&gt;&lt;/center&gt;


&lt;p&gt;You can see that I've selected to recieve &lt;strong&gt;text&lt;/strong&gt; from &lt;strong&gt;Skype&lt;/strong&gt;. You can select any single application, or opt to show this Service on all applications, but the
workflow I'm writing will expect text to be formatted as shown above (ie. from a Skype transcript) so I restrict the Service to only Skype.&lt;/p&gt;

&lt;p&gt;After I looked over some of the text actions, I realized that none of them would do what I needed. What I needed was essentially a text mill -- something that is
trivial to write in, say, Ruby. Thankfully, Automator lets you do just that. I found the &lt;strong&gt;Run Shell Script&lt;/strong&gt; action in the Utilities Library, and after some trial
and error I realized that I could not simply write &lt;code&gt;ruby -ne 'puts $_ unless...'&lt;/code&gt;. I discovered that I could change the &lt;strong&gt;Shell&lt;/strong&gt; dropdown to &lt;code&gt;/usr/bin/ruby&lt;/code&gt;, which
is much better as it lets you write out an entire script.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;STDIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^[\D]+.*[\d]+:[\d]+\s[AM|PM]/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^[\d]+:[\d]+\s[AM|PM]/&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Probably not the best Ruby or regexes ever written, but they get the job done. Then it's a simple matter of dragging over the &lt;strong&gt;Copy to Clipboard&lt;/strong&gt; action
underneath the shell script, saving, and done! You can see the final state of the Automator window &lt;a href=&quot;/img/automator/automator-window-final.png&quot;&gt;here&lt;/a&gt;, not
embedded in the post as it's rather large.&lt;/p&gt;

&lt;p&gt;Now I can try it out. Go to Skype, select the same chat transcript as I did before, go up to the Services menu and hit my new &lt;strong&gt;Copy Chat Log&lt;/strong&gt; service and...
Much better!&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/img/automator/skype-log-clean.png&quot; alt=&quot;Clean Skype Log&quot;&gt;&lt;/center&gt;


&lt;h2&gt;Keyboard Shortcuts&lt;/h2&gt;

&lt;p&gt;So it's awesome that now we can copy and paste a chat log without having to format it manually. That will save me a ton of time in the long run, but that is a lot
of menu to mouse through to do it. Keyboard shortcuts are a programmer's best friend, and Apple has us covered here too.&lt;/p&gt;

&lt;p&gt;Open up the Keyboard System Prefrences pane. Go to the Keyboard Shortcuts tab, and select Application Shortcuts from the list on the left. Add a new shortcut with
the plus button, which will make an options sheet come down. Select Skype from the Application dropdown, type in &quot;Copy Chat Log&quot; in the Menu Title field, and select
a keyboard shortcut combination -- I chose &lt;code&gt;command+option+c&lt;/code&gt; here.&lt;/p&gt;

&lt;p&gt;And that's it. This is just scratching the surface of the tasks that you can automate with this tool. One of the big &quot;promises&quot; of Automator is its
integration with the Cocoa API. Application devs can create and expose custom actions in their apps that one could take advantage of using Automator Workflows or
Services. Unfortunately, not many app developers take the time to implement these features, but there is still a ton of useful functionality you could wring out
of just the stock Automator actions.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
   <title>Chef and AWS, who loves plumbing?</title>
   <link href="http://blog.joshualindsey.net/2011/04/14/chef-and-aws-who-loves-plumbing"/>
   <updated>2011-04-14T00:00:00-04:00</updated>
   <id>http://blog.joshualindsey.net/2011/04/14/chef-and-aws-who-loves-plumbing</id>
   <content type="html">&lt;p&gt;I love plumbing! I just got finished moving &lt;a href=&quot;https://github.com/jlindsey/jlindsey.github.com&quot;&gt;my personal CV site&lt;/a&gt; and &lt;a href=&quot;https://github.com/jlindsey/blog&quot;&gt;this blog&lt;/a&gt;
from being hosted on &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; and &lt;a href=&quot;http://tumblr.com&quot;&gt;Tumblr&lt;/a&gt;, respectively, onto an AWS Free-Tier Micro instance. Here's how
I did it.&lt;/p&gt;

&lt;h2&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;First, let me gush about &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt; for a bit. Jekyll is billed as a &quot;blog-aware static site generator&quot;, but it might be more
succinctly described as an abstracted text-transformation engine. One writes layouts and partials in HTML and Liquid, blog posts in Markdown, then Jekyll
compiles these into a series of static HTML files. It's really quite beautiful in its simplicity, and allows you to &quot;blog like a programmer&quot;. You can write your
site layout and blog posts in whatever text editor you like (I'm writing this in vim), write whatever deploy methods or utility scripts you want (I have a collection
of utilities using Ruby's Rake), and deploy the static files however you want (again, with Rake in my case) to wherever you want, and serve the files using whatever
web server you want.&lt;/p&gt;

&lt;p&gt;So why Jekyll? I've gone through a couple blogging engines now. ExpressionEngine and Radiant were too clunky. WordPress was too bloated. I liked the concept of
&lt;a href=&quot;http://www.kottke.org/05/10/tumblelogs&quot;&gt;tumbleblogging&lt;/a&gt;, but Tumblr was slow and its uptime was often spotty when I used it (though it has gotten much better since).
I also couldn't stop thinking that I was jumping through a lot of hoops and incurring a lot of overhead – both temporally and computationally – just to write posts
and disseminate them on the internet. Plus, I'm a minimalist at heart and what's better than flat text files?&lt;/p&gt;

&lt;p&gt;You can view the link in the first paragraph to see the source for this blog on github. There are plenty of other blog posts and tutorials out there for setting up
Jekyll and migrating existing blog posts from WordPress or whatever engine you're on now so I won't repeat those here.&lt;/p&gt;

&lt;h2&gt;AWS and Chef&lt;/h2&gt;

&lt;p&gt;As it happens, AWS and Chef both have an essentially free usage tier that makes setting up a simple site and blog very economical. Amazon is still running their
&lt;a href=&quot;http://aws.amazon.com/free/&quot;&gt;free tier&lt;/a&gt; that allows you to run a Micro instance for free for one year (among many other free services offered in the package).
Opscode has has a &lt;a href=&quot;http://opscode.com/platform/&quot;&gt;free plan&lt;/a&gt; on their Opscode Platform (esentially a hosted Chef Server service) for up to five nodes.&lt;/p&gt;

&lt;p&gt;Signing up for both of these is straightforward enough. I already had a personal Opscode Platform account for &lt;a href=&quot;http://www.cloudspace.com&quot;&gt;Cloudspace&lt;/a&gt;, so I just
created a new Organization for myself. If you're not familiar with Chef, the &lt;a href=&quot;http://wiki.opscode.com/display/chef/Quick+Start&quot;&gt;quick start&lt;/a&gt; over at the Opscode
Chef wiki is a good place to... start. After setting up my &lt;a href=&quot;http://wiki.opscode.com/display/chef/Chef+Repository&quot;&gt;Chef repo&lt;/a&gt; for this organization, I set about
uploading the cookbooks I would need and writing roles for my nodes. Though I only have the single Micro now, it's best to be prepared so I abstracted out the
configuration into three roles.&lt;/p&gt;

&lt;p&gt;First, a &quot;base&quot; role. This role's job is to setup &lt;code&gt;chef-client&lt;/code&gt; to run as a daemon which the Chef bootstrapping process doesn't do by default (more on that in a minute).
In daemon mode, the client performs a run (attempts to converge the node) on a configurable interval. I set mine up to run every 30 minutes.&lt;/p&gt;

&lt;p&gt;Then, a &quot;static_web&quot; role that installs the &lt;code&gt;apt&lt;/code&gt;, &lt;code&gt;nginx&lt;/code&gt;, and &lt;code&gt;git&lt;/code&gt; packages. It also includes the &quot;base&quot; role in its runlist, making this role a kind of &quot;subclassed&quot;
role.&lt;/p&gt;

&lt;p&gt;Finally, a &quot;joshualindsey&quot; role, which includes the &quot;static_web&quot; role and a custom &lt;code&gt;joshualindsey.net&lt;/code&gt; cookbook that sets up my nginx configs and performs a git checkout.
You can see this cookbook for yourself &lt;a href=&quot;https://github.com/jlindsey/cookbooks/tree/master/joshualindsey.net&quot;&gt;here&lt;/a&gt;. The astute reader will see the benefit of this
cookbook when combined with the daemonized &lt;code&gt;chef-client&lt;/code&gt;. Because the sites are public github repos, all I have to do to update my site is edit it as I normally would,
commit and push back up and within 30 minutes or less I will have a fresh checkout on the server, automatically. Or, I can simply ssh in and run a &lt;code&gt;sudo chef-client&lt;/code&gt;
myself if I don't want to wait that long.&lt;/p&gt;

&lt;h2&gt;Launching&lt;/h2&gt;

&lt;p&gt;As an engineer and sysadmin, I can't help but feel like any time spent away from the terminal is time that isn't being spent efficiently enough. Web UIs can be slow
and buggy; give me an API to work with and I will get the job done before your page is even finished loading. Thankfully, one of the selling points of AWS is its
extensive API. Double thankfully, Opscode has already baked the pertinent EC2 API calls into the knife command for us (with help from the stellar
&lt;a href=&quot;http://rubygems.org/gems/fog&quot;&gt;fog&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;So, to launch a new EC2 instance, bootstrap Chef onto it, configure it, and kick off a run to provision all I have to do is run this single command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;knife ec2 server create &lt;span class=&quot;s2&quot;&gt;&amp;quot;role[joshualindsey]&amp;quot;&lt;/span&gt; -N &lt;span class=&quot;s2&quot;&gt;&amp;quot;joshualindsey.net&amp;quot;&lt;/span&gt; -S jlindsey -f t1.micro -i ami-cef405a7 -x ubuntu -G default
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Pretty awesome, but a little opaque. Let's break it down.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;knife ec2 server create&lt;/code&gt; bit is fairly self-explanatory, I think. Just run &lt;code&gt;knife&lt;/code&gt; with its series of subcommands.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&quot;role[joshualindsey]&quot;&lt;/code&gt; sets the run-list. In this case, it is just my single role.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-N &quot;joshualindsey.net&quot;&lt;/code&gt; sets the node name that the Chef Server uses to identify the new node.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-S jlindsey&lt;/code&gt; is my EC2 keypair name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f t1.micro&lt;/code&gt; is setting the &quot;flavor&quot; of the instance to a Micro, so that I can host my site for free. Hurray!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i ami-cef405a7&lt;/code&gt; is the AMI ID for the instance. Once, in order to really automate Chef on AWS, we had to compile custom AMIs with Chef pre-installed
and pre-configured, or set to draw configuration from the user-data associated with the instance. Now that knife can launch and bootstrap instances for
us, however, we can use any AMI we want (I'm using Eric Hammond's wonderful &lt;a href=&quot;http://alestic.com/&quot;&gt;Alestic Ubuntu AMIs&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-x ubuntu&lt;/code&gt; sets up the user the knife command should SSH in as to bootstrap Chef and kick off the initial run.&lt;/li&gt;
&lt;li&gt;And &lt;code&gt;-G default&lt;/code&gt; sets the instance's security group.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And within minutes, I have a brand-new webserver that is happily serving up pages!&lt;/p&gt;
</content>
  </entry>
  

</feed>
